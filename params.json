{"name":"Passcoder","tagline":"jQuery plugin for making passcode inputs","body":"Passcoder\r\n=========\r\n\r\nPasscoder is jQuery plugin to create a passcode UI for an input field. By default, it takes a single input, and turns it into 4 fields, each containing one character. when a character is input, the focus moves to the next field. Passcoder is easy to use.\r\n\r\nGetting started with Passcoder\r\n---------\r\n\r\nGrab a copy of `passcoder.js` or `passcoder.min.js` and include it in your page after jQuery. Simple as that.\r\n\r\nUsing Passcoder\r\n---------\r\n\r\nAny textual input can be Passcoded. When an input becomes passcoded, it retains the original size of the input field. If you have an input that is 150px, the resulting passcoded input (including margins and paddings) will span the same 150px.  \r\n  \r\nTo passcode an input field, simply call  \r\n\r\n`$('.myInputField').passcode();`  \r\n  \r\nThis will use the default values for passcoder. This will make 4 input boxes, and a margin (left and right) of 5px for every input.\r\n\r\nOveriding Defaults\r\n---------\r\n\r\nTo call passcoder to use more or less inputs, or put more distance between the inputs, simply call passcoder like this:\r\n  \r\n    $('.myInputField').passcode({  \r\n        characters: 5,  \r\n        margin: 10  \r\n    });\r\n\r\nForm Submition\r\n-----------\r\n\r\nBecause passcoder creates several inputs, it needs to join the values of each input upon form submition. To do this, Passcoder will remove the `name` attribute from each of the passcoder inputs (to not post the data), and creates a new hidden input field, with the same `name` attribute. The idea is so you only need to call `element.passcoder()` and everything else will be taken care of. \r\nYou can still create bindings for submition on the form, passcoder will still render the values.\r\n","google":"UA-42858766-1","note":"Don't delete this file! It's used internally to help with page regeneration."}